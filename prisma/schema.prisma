generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ---------------------------  Auth & Users  ---------------------------
 */

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  avatarUrl      String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  apiKeys     ApiKey[]
  memberships TeamMembership[]

  @@index([role])
  @@index([emailVerified])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@index([identifier])
}

/// -- Future public-API authentication (stub, unused) --
model ApiKey {
  id         String    @id @default(cuid())
  userId     String
  key        String    @unique
  name       String?
  revoked    Boolean   @default(false)
  expiresAt  DateTime?
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([revoked, expiresAt])
}

enum Role {
  ADMIN
  USER
}

/**
 * ---------------------------  Teams  ---------------------------
 */

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  memberships TeamMembership[]
  invites     InviteToken[]
}

model TeamMembership {
  id     String @id @default(cuid())
  teamId String
  userId String
  role   Role   @default(USER) // ADMIN | USER (reuse global enum)

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model InviteToken {
  id         String    @id @default(cuid())
  teamId     String
  email      String
  token      String    @unique
  expiresAt  DateTime
  acceptedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  surname   String
  password  String
  createdAt DateTime @default(now())
  apiKeys   ApiKey[]
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
